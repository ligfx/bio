<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<script type="text/javascript">
	{{ render('raphael-min.js') }}
</script>
<style type="text/css">
#outerContainer {
	width: 700px;
	margin: 0 auto;
}
#innerContainer {
	width: 500px;
	margin-left: 200px;
}
#proteinDomainsBackground {
	height: 100%;
	width: 100%;
	position: absolute;
	z-index: -1;
}
.pullout {
	margin-left: -200px;
}
.dataMeta {
	width: 200px;
}
.organismMeta {
	width: 150px;
	float: left;
}
.organismGraphic {
	margin-left: 150px;
}
.organismAlignment:hover {
	background-color: #eee;
	background-color: rgba(220, 220, 220, 0.5);
}
.alignmentGraphic a {
	display: block;
}
.alignmentGraphic a:hover {
	background-color: #eee;
	background-color: rgba(220, 220, 220, 0.5);
}
.selectionColumn {
	margin-left: 150px;
	text-align: center;
}
.alignmentSelection {
	width: 50px;
	position: absolute;
	text-align: center;
}
.alignmentGraphic {
	margin-left: 50px;
}

#ruler {
	margin-bottom: 1em;
}
#rulerLegendStart {
	float: left;
}
#rulerLegendEnd {
	float: right;
}
#rulerGraphic {
	height: 1em;
	border: 1px solid #666;
	border-top: none;
}
#proteinDomainsHeader {
	height: 1em;
}
</style>
</head>
<body>
	
<div id="outerContainer">
<div id="innerContainer">

<div id="ruler"></div>
<div id="proteinDomainsHeader"></div>

<form method="get" action="#">
	<div id="data" style="position: relative">
		<div id="proteinDomainsBackground"></div>
		<div id="dataHeader" class="pullout">
			<div class="dataMeta">
				<div class="selectionColumn"><strong>Select</strong></div>
			</div>
		</div>
	
		<div id="organisms" class="pullout"></div>
		&nbsp;
	</div>

	<div id="dataFooter" class="pullout">
		<div class="dataMeta">
			<div class="selectionColumn">
				<input type="submit" value="Export sequence data">
			</div>
		</div>
	</div>
</form>

</div>
</div>

<script type="text/html" id="rulerTemplate">
	<div id="rulerLegend">
		<div id="rulerLegendStart">0</div>
		<div id="rulerLegendEnd" data-value="width"></div>
		<div style="clear: both"></div>
	</div>
	<div id="rulerGraphic"></div>
</script>
<script type="text/html" id="organismTemplate">
	<div class="organism">
		<div class="organismMeta">
			<div class="organismInfo"></div>
		</div>
		<div class="organismGraphic"></div>
	</div>
</script>
<script type="text/html" id="alignmentTemplate">
	<div class="organismAlignment">
		<div class="alignmentSelection"><input type="checkbox" name="alignment"></div>
		<div class="alignmentGraphic"><a href="#"></a></div>
	</div>
</script>
<script type="text/javascript">

var View = (function(){
	var _init = function(opts) {
		this.model = opts.model;
		this.element = opts.element;
	}
	var _$ = function(selector) {
		return this.element.querySelector(selector);
	}
	var extend = function(prototype) {
		var class = function() {
			_init.apply(this, arguments);
			this.init();
			this.render();
		};
		class.prototype = prototype;
		class.prototype.$ = _$;
		return class;
	}
	return { extend: extend };
})();

var Template = function(id) {
	this.template = document.getElementById(id);
}
Template.prototype = {
	apply: function (element) {
		element.innerHTML = this.template.innerHTML;
	},
	asNode: function () {
		var holder = document.createElement("div");
		holder.innerHTML = this.template.innerHTML;
		return holder.children[0];
	}
}

var _ = {
	each: function (collection, callback) {
		for (var i = 0; i < collection.length; ++i) {
			callback(collection[i]);
		}
	},
	reduce: function (collection, total, callback) {
		_.each(collection, function (element) {
			total = callback(total, element);
		})
		return total;
	},
	map: function (collection, callback) {
		return _.reduce(collection, [], function (total, element) {
			total.push(callback(element));
			return total;
		})
	},
	sum: function (collection, callback) {
		return _.reduce(collection, 0, function(total, element) {
			total = total + callback(element);
			return total;
		})
	}
}

var E = {
	getDimensions: function(element) {
		var style = window.getComputedStyle(element, null);
		var width = parseInt(style.getPropertyValue("width"));
		var height = parseInt(style.getPropertyValue("height"));
		return [width, height]
	},
	createRaphael: function(element) {
		var dimensions = E.getDimensions(element);
		var width = dimensions[0];
		var height = dimensions[1];
		
		return Raphael(element, width, height);
	}
};

var RulerView = View.extend({
	init: function() {
		new Template("rulerTemplate").apply(this.element);
		this.endCap = this.$("[data-value='width']");
	},
	render: function() {
		this.endCap.innerHTML = this.model.width;
	},
});

var ProteinDomainsRaphael = (function() {
	var drawDomains = function(domains, attr) {
		var self = this;
		_.each(domains, function (domain) {
			var s = parseInt(domain.query_start * self.width);
			var w = parseInt(domain.query_width * self.width);
			self.rect(s, 0, w, self.height).attr(attr);
		});
	}
	var drawMidline = function(attr) {
		var mid = parseInt(this.height / 2) + 0.5;
		this.path("M0 " + mid + "L" + this.width + " " + mid).attr(attr);
	}
	var extend = function(paper) {
		paper.drawDomains = drawDomains;
		paper.drawMidline = drawMidline;
	}
	return { extend: extend }
})();


var ProteinDomainsView = (function() {
	var _init = function() {
		this.paper = E.createRaphael(this.element);
		ProteinDomainsRaphael.extend(this.paper);
	}
	var extend = function(prototype) {
		prototype.init = _init;
		return View.extend(prototype);
	}
	return { extend: extend }
})();

var ProteinDomainsHeaderView = ProteinDomainsView.extend({
	render: function() {
		this.paper.drawMidline({stroke: "#666"});
		this.paper.drawDomains(this.model, {fill: "rgb(40, 150, 40)", stroke: ""})
	}
});

var ProteinDomainsBackgroundView = ProteinDomainsView.extend({
	render: function() {
		this.paper.drawDomains(this.model, {fill: "rgb(180, 224, 158)", stroke: ""})
	}
});

var HSPRenderer = function(hsp) {
	this.hsp = hsp;
}
HSPRenderer.prototype = {
	height: function() { return 5; },
	drawOn: function(paper) {
		var x = parseInt(this.hsp.query_start * paper.width);
		var y = 0;
		var h = this.height();
		var w = parseInt(this.hsp_query_width * paper.width);
		return paper.rect(x, y, h, w);
	}
}

var AlignmentGraphicView = View.extend({
	init: function() {
		this.paper = Raphael(this.element, 1, 1);
		alert("init!");
		alert(this.element);
		window.a = this.element;
	},
	render: function() {
		this.element.href = this.model.url;
		this.element.innerHTML = "";
		
		var renderers = _.map(this.model.hsps, function (hsp) {
			return new HSPRenderer(hsp);
		})
		
		var height = _.sum(renderers, function(r) { return r.height(); })
		var width = E.getDimensions(this.element)[0];
		this.paper.setSize(width, height);
		
		var y_offset = 0;
		var self = this;
		_.each(renderers, function(hsp) {
			hsp.drawOn(self.paper).translate(0, y_offset).attr({fill: "red", stroke: "none"});
			y_offset = y_offset + hsp.height();
		})
	}
})

var OrganismGraphicView = function(element) {
	this.element = element;
}
OrganismGraphicView.prototype = {
	draw: function (organism) {
		var self = this;
		_.each(organism.alignments, function(alignment) {
			var e = new Template("alignmentTemplate").asNode();
			
			e.querySelector(".alignmentSelection input").value = organism.name + ":" + alignment.digest;
			
			new AlignmentGraphicView({
				element: e.querySelector(".alignmentGraphic > a"),
				model: alignment
			});
			
			self.element.appendChild(e);
		});
	}
}

var OrganismMetaView = function(element) {
	this.element = element;
}
OrganismMetaView.prototype = {
	draw: function(organism) {
		this.element.querySelector(".organismInfo").innerHTML = organism.name;
	}
}

var OrganismView = function(element) {
	this.element = element;
}
OrganismView.prototype = {
	draw: function(organism) {
		var meta = new OrganismMetaView(this.element.querySelector(".organismMeta"));
		meta.draw(organism);
		
		var graphic = new OrganismGraphicView(this.element.querySelector(".organismGraphic"));
		graphic.draw(organism);
	}
}

var OrganismListView = function(element) {
	this.element = element;
}
OrganismListView.prototype = {
	draw: function(organisms) {
		for (var i = 0; i < organisms.length; ++i) {
			var organism = organisms[i];
			var child = new Template("organismTemplate").asNode();
			this.element.appendChild(child);
			var organism_view = new OrganismView(child);
			organism_view.draw(organism);
		}
	}
}

var Data = {
	width: {{ input_width }},
	domains: [
		{% for domain in domains %}
		{
			query_start: {{ domain.query_start / input_width }},
			query_width: {{ domain.query_width / input_width }}
		},
		{% endfor %}
	],
}

var ruler = new RulerView({
	model: { width: Data.width },
	element: document.getElementById("ruler")
});

var protein_domains_header = new ProteinDomainsHeaderView({
	model: Data.domains,
	element: document.getElementById("proteinDomainsHeader")
});

var organisms = [
	{% for organism, data in data.by_organism() %}
	{
		name: "{{organism.name}}",
		alignments: [
			{% for alignment, data in data.by_alignment() %}
			{
				url: "alignments/{{ alignment.digest }}.html",
				hsps: [
					{% for hsp, datum in data.by_hsp() %}
						{
							query_start: {{ hsp.query_start / input_width }},
							query_width: {{ hsp.query_width / input_width }}
						},
					{% endfor %}
				]
			},
			{% endfor %}
		]
	},
	{% endfor %}
];

var organism_list = new OrganismListView(document.getElementById("organisms"));
organism_list.draw(organisms)

var protein_domains_background = new ProteinDomainsBackgroundView({
	model: Data.domains,
	element: document.getElementById("proteinDomainsBackground")
});
protein_domains_background.render();

</script>

</body>
</html>
