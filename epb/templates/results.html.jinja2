<!DOCTYPE html>
<html lang="en">

<head>
	<style type="text/css">
		{{ render("results.css") }}
	</style>
</head>

<body>

<div id="baseLayer">

	<figure id="colorkey">
		<figcaption>Color key for alignment scores</figcaption>
		<div class="poor">&lt; 40</div>
		<div class="fair">40 &ndash; 50</div>
		<div class="okay">50 &ndash; 80</div>
		<div class="good">80 &ndash; 200</div>
		<div class="great">200 &le;</div>
	</figure>

	<div style="clear: both"></div>

	<div class="organisms">

	{% for organism, data in data.by_organism() %}
	<section class="organism">
		<header>
			<div class="organismName">
				{{ organism.name	 }}
			</div>
			<div class="sequences">
				{% for seq in sequences %}
					<div class="sequence" style="
						width: {{ seq | length | as_percent(input_width) }}">
						<div class="sequenceName">{{ seq.name }}</div>
						<div class="sequenceLength">{{ seq | length }} nt</div>
					</div>
				{% endfor %}
				<div style="clear: both"></div>
			</div>
		</header>

			<div class="alignmentContainer">
			{% for alignment, data in data.by_alignment() %}
				<a id="alignment-{{ alignment.digest }}"
				   href="alignments/{{ alignment.digest }}.html">
				<div class="alignment">
			
					<div class="divider">

						{% for seq in sequences[0:-1] %}
							<div class="divider" style="
								left: {{ seq | length | as_percent(input_width) }}"
							>
						{% endfor %}
						
						<div class="alignmentGraphics" style="
							right: {{ sequences[:-1] | map_function('len') | sum | as_percent(input_width) }}"
						>
							<div class="alignmentName">
								<strong>{{ alignment.name }}</strong><br/>
								<em>{{ data.minimum_evalue() }}</em>
							</div>
						
							{% for record, data in data.by_record() %}
								<div class="graphic" style="
									width: {{ record.width | as_percent(input_width) }};
									margin-left: {{ record.offset | as_percent(input_width) }}"
								>
									{% for hsp, datum in data.by_hsp() %}
										<div class="hsp_border" style="
											border-color: {{ hsp.color }};
											margin-left: {{ hsp.query_start | as_percent(record.width) }};
											width: {{ hsp.query_width | as_percent(record.width) }}">
										</div>
									{% endfor %}
								</div>
							{% endfor %}
							
							{% for seq in sequences[0:-1] %}
								</div>
							{% endfor %}
						</div>
						
					</div>
				
					<div style="clear: both"></div>
				</div>
				</a>
			{% endfor %}
		</div>

	</section>
	{% endfor %}

	</div>

</div><!-- #baseLayer -->

<script type="text/javascript">

	{% for organism, data in data.by_organism() %}
	{% for alignment, data in data.by_alignment() %}

		(function() {

			var element = $("alignment-paper-{{ alignment.digest }}").elements[0];

			var width = parseInt(element.style.width);
			var height = parseInt(element.style.height);

			var paper = Raphael("alignment-paper-{{ alignment.digest }}", width, height);
		
			{% for domain in organism.get_domains(alignment.name) %}
				(function(){
					var x = 0;
					var y = {{ domain.qstart / alignment.length }} * height;
					var h = {{ (domain.qend - domain.qstart) / alignment.length }} * height;
					paper.rect(x, y, width, h).attr({
						"stroke": "#aaa",
						"stroke-width": 1,
						"fill": "#f8f8f8"
					});
				})();
			{% endfor %}
		
			(function() {
				var offset = 0;
				{% for sequence in sequences[:-1] %}
						offset = offset + {{ sequence | length }};
						(function() {
							var x = parseInt(offset / {{ input_width }} * width);
							var path = "M" + x + " 0L" + x + " " + height;
							paper.path(path).attr({
								"stroke": "#aaa",
								"stroke-width": 1
							});
						})();
				{% endfor %}
			})();
		
			{% for hsp, datum in data.by_hsp() %}
	
				(function() {

					var query_start = {{ hsp.query_start / input_width }} * width;
					var query_end = {{ hsp.query_end / input_width }} * width;
					
					var subject_start = {{ hsp.subject_start / alignment.length }} * height;
					var subject_end = {{ hsp.subject_end / alignment.length }} * height;
	
					var path;
	
					path = "M" + query_start + " " + subject_start + "L" + query_end + " " + subject_end;
					paper.path(path).attr({
						"stroke": "{{ hsp.color }}",
						"stroke-width": 3
					});
					
					path = "M" + query_start + " 0L" + query_end + " 0";
					paper.path(path).attr({
						"stroke": "{{ hsp.color }}",
						"stroke-width": 6
					});
					
					path = "M0 " + subject_start + "L0 " + subject_end;
					paper.path(path).attr({
						"stroke": "{{ hsp.color }}",
						"stroke-width": 6
					});
				
				})();
			
			{% endfor %}
	
		})();
	
	{% endfor %}
	{% endfor %}
	
</script>

</body>

</html> 
