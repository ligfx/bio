<!DOCTYPE html>
<html lang="en">

<head>
	<style type="text/css">
		{{ render("results.css") }}
	</style>
	
	<script type="text/javascript">
		{{ render("app.js.jinja2") }}
	</script>
	<script type="text/javascript">
	
		(function() {
	
			var alignments = [
				{% for organism, data in data.by_organism() %}
					{% for alignment, data in data.by_alignment() %}
						"{{ alignment.digest }}",
					{% endfor %}
				{% endfor %}
			];
	
			var scrolling = (function() {
				var lastScroll = [0, 0];
				return {
					save: function() {
						var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);
						var vscroll = (document.all ? document.scrollTop : window.pageYOffset);
						lastScroll = [hscroll, vscroll];
					},
					restore: function() {
						window.scrollTo(lastScroll[0], lastScroll[1]);
					}
				};
			})();
	
			domReady(function() {
				$.each(alignments, function(d) {
					$("alignment-" + d).click(function() {
						scrolling.save();
						
						$('overlays').show();
						$('alignment-overlay-' + d).show();
						$('baseLayer').hide();
					});
					$("alignment-overlay-close-" + d).click(function() {
						$('overlays').hide();
						$('alignment-overlay-' + d).hide();
						$('baseLayer').show();
						
						scrolling.restore();
					});
				});
			});
			
		}());
	</script>
</head>

<body>

<div id="overlays">
	{% for organism, data in data.by_organism() %}
	{% for alignment, data in data.by_alignment() %}
		<section id="alignment-overlay-{{ alignment.digest }}">
			<div class="actions">
				<a id="alignment-overlay-close-{{ alignment.digest }}"
				   href="#close">Close popup</a>
			</div>
			
			<header>
			<h1 class="organismName">{{ organism.name }}</h1>
			<h2 class="geneName">{{ alignment.name }}</h2>
			</header>

			<dl>
				<dt>E-value</dt>
				<dd>{{ data.minimum_evalue() }}</dd>

				<dt>Combined Score</dt>
				<dd>TODO</dd>

				<dt>Coverage</dt>
				<dd>TODO</dd>

				<dt>Source</dt>
				<dd>{{ organism.info.source }}</dd>

				<dt>Webpage</dt>
				<dd>{{ organism.info.url }}</dd>

				<dt>Gene</dt>
				<dd>{{ organism.url_for_gene(alignment.name) }}</dd>

				<dt>Reference</dt>
				<dd>{{ organism.info.reference }}</dd>
			</dl>

			<section class="alignment">
				<header>
					<h1>Alignment</h1>
				</header>
				<div id="..." class="alignmentGraph"></div>
			</section>

			<section class="sequence">
				<header>
					<h1>Sequence</h1>
				</header>

				<span>{{ organism.get_sequence(alignment.name) }}</span>
			</section>

			<section class="hsps">
				<header>
					<h1>High-scoring pairs</h1>
				</header>
				{% for hsp, datum in data.by_hsp() %}
					<div class="hsp">
						<div class="info">
							<dl>
								<dt>E-value</dt>
								<dd>{{ hsp.evalue }}</dd>

								<dt>Score</dt>
								<dd>{{ hsp.score }}</dd>

								<dt>Query</dt>
								<dd>{{ hsp.query_start }}–{{ hsp.query_end }} out of TODO nt</dd>

								<dt>Target</dt>
								<dd>{{ hsp.subject_start }}–{{ hsp.subject_end }} out of {{ alignment.length }} nt</dd>
							</dl>
						</div>
						<div class="match">
							<pre>
								{% for query, match, sbjct in hsp.lines() %}
<div class="line">{{ sbjct }}
{{ match }}
{{ query }}</div>
								{% endfor %}
							</pre>
						</div>
					</div>
				{% endfor %}
			</section>
			
		</section>
	{% endfor %}
	{% endfor %}
	<div style="clear: both"></div>
</div>

<div id="baseLayer">

	<figure id="colorkey">
		<figcaption>Color key for alignment scores</figcaption>
		<div class="poor">&lt; 40</div>
		<div class="fair">40 &ndash; 50</div>
		<div class="okay">50 &ndash; 80</div>
		<div class="good">80 &ndash; 200</div>
		<div class="great">200 &le;</div>
	</figure>

	<div style="clear: both"></div>

	<div class="organisms">

	{% for organism, data in data.by_organism() %}
	<section class="organism">
		<header>
			<div class="organismName">
				{{ organism.name	 }}
			</div>
			<div class="sequences">
				{% for seq in sequences %}
					<div class="sequence" style="
						width: {{ seq | length | as_percent(input_width) }}">
						<div class="sequenceName">{{ seq.name }}</div>
						<div class="sequenceLength">{{ seq | length }} nt</div>
					</div>
				{% endfor %}
				<div style="clear: both"></div>
			</div>
		</header>

			<div class="alignmentContainer">
			{% for alignment, data in data.by_alignment() %}
				<a id="alignment-{{ alignment.digest }}"
				   href="#alignment-{{ alignment.digest }}">
				<div class="alignment">
			
					<div class="divider">

						{% for seq in sequences[0:-1] %}
							<div class="divider" style="
								left: {{ seq | length | as_percent(input_width) }}"
							>
						{% endfor %}
						
						<div class="alignmentGraphics" style="
							right: {{ sequences[:-1] | map_function('len') | sum | as_percent(input_width) }}"
						>
							<div class="alignmentName">
								<strong>{{ alignment.name }}</strong><br/>
								<em>{{ data.minimum_evalue() }}</em>
							</div>
						
							{% for record, data in data.by_record() %}
								<div class="graphic" style="
									width: {{ record.width | as_percent(input_width) }};
									margin-left: {{ record.offset | as_percent(input_width) }}"
								>
									{% for hsp, datum in data.by_hsp() %}
										<div class="hsp_border" style="
											border-color: {{ hsp.color }};
											margin-left: {{ hsp.query_start | as_percent(record.width) }};
											width: {{ hsp.query_width | as_percent(record.width) }}">
										</div>
									{% endfor %}
								</div>
							{% endfor %}
							
							{% for seq in sequences[0:-1] %}
								</div>
							{% endfor %}
						</div>
						
					</div>
				
					<div style="clear: both"></div>
				</div>
				</a>
			{% endfor %}
		</div>

	</section>
	{% endfor %}

	</div>

</div><!-- #baseLayer -->

<script type="text/javascript">

	{% for alignment, data in data.by_alignment() %}

		(function() {

			var element = $("alignment-paper-{{ alignment.digest }}").elements[0];

			var width = parseInt(element.style.width);
			var height = parseInt(element.style.height);

			var paper = Raphael("alignment-paper-{{ alignment.digest }}", width, height);
		
			{% for hsp, datum in data.by_hsp() %}
	
				(function() {

					var query_start = {{ hsp.query_start / input_width }} * width;
					var query_end = {{ hsp.query_end / input_width }} * width;
					
					var subject_start = {{ hsp.subject_start / alignment.length }} * height;
					var subject_end = {{ hsp.subject_end / alignment.length }} * height;
	
					var path = "M" + query_start + " " + subject_start + "L" + query_end + " " + subject_end;
	
					paper.path(path).attr({
						"stroke": "{{ hsp.color }}",
						"stroke-width": 3
					});
				
				})();
			
			{% endfor %}
	
		})();
	
	{% endfor %}
	
</script>

</body>

</html> 
