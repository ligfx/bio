<html>
<head>
<script type="text/javascript">
	{{ render('raphael-min.js') }}
</script>
<script type="text/javascript">
	{{ render('peso.js') }}
</script>
<script type="text/javascript">
	{{ render('underscore.js') }}
</script>
</head>
<style type="text/css">
body {
	font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif;
	color: #333;
}
#container {
	width: 900px;
	margin: 0 auto;
}

#info, #graphic {
	float: left;
	width: 48%;
}

dl {
	width: 100%;
	overflow: hidden;
}
dt {
	width: 35%;
	clear: left;
	float: left;
	font-weight: bold;
	margin: 0;
}
dt:after {
	content: ":";
}
dd { 
	width: 65%;
	float: left;
	margin: 0;
}

#alignmentGraph {
	width: 200px;
	height: 200px;
	border: 1px solid #999;
}
#alignmentGraph svg path {
	stroke-width: 3px;
}
#alignmentGraph svg path.great { stroke: red; }
#alignmentGraph svg path.good  { stroke: fuchsia; }
#alignmentGraph svg path.okay  { stroke: lime; }
#alignmentGraph svg path.poor  { stroke: blue; }
#alignmentGraph svg path.bad   { stroke: black; }

.hsp {
	border-left: 3px solid transparent;
	padding-left: 1em;
	padding-bottom: 1em;
}
.hsp.great { border-color: red; }
.hsp.good  { border-color: fuchsia; }
.hsp.okay  { border-color: lime; }
.hsp.poor  { border-color: blue; }
.hsp.bad   { border-color: black; }

#queryLength { text-align: right; }
#accessionLength { vertical-align: bottom; }

#sequence span {
	word-wrap: break-word;
	display: block;
	font-family: monospace;
}
.matchChunk {
	font-family: monospace;
	padding-bottom: 1em;
}

.hspInfo {
	width: 50%;
}

#colorKey {
	margin-bottom: 1em;
}
#colorKey > div {
	width: 19%;
	float: left;
	font-weight: bold;
	color: white;
	text-align: center;
}
#colorKey .great { background-color: red; }
#colorKey .good { background-color: fuchsia; }
#colorKey .okay { background-color: lime; }
#colorKey .poor { background-color: blue; }
#colorKey .bad { background-color: black; }

#alignmentGraph svg rect {
	fill: rgb(180, 224, 158);
	fill: rgba(180, 224, 158, 0.5);
	stroke: none;
}

#queryDomainsHeader {
	height: 1em;
}
#targetDomainsHeader {
	width: 1em;
}

#targetDomainsHeader svg rect,
#queryDomainsHeader svg rect {
	fill: rgb(40, 150, 40);
	stroke: none;
}
#targetDomainsHeader svg a:hover rect,
#queryDomainsHeader svg a:hover rect {
	fill: rgb(40, 170, 40);
}

</style>
<body>
<div id="container">
	
<div id="header">
	<h1 class="organismName">{{ organism.name }}</h1>
	<h2 class="geneName">{{ organism.get_fullname(alignment.name) }}</h2>
	<a href="../results.html">Back to results</a>
</div>

<div id="info">
	<dl>
		<dt>E-value</dt>
		<dd>{{ data.minimum_evalue() }}</dd>

		<dt>Length</dt>
		<dd>{{ alignment.length }}</dd>

		<dt>Source</dt>
		<dd>{{ organism.info.source }}</dd>

		<dt>Webpage</dt>
		<dd><a href="{{ organism.info.url }}">{{ organism.info.url }}</a></dd>

		<dt>Gene</dt>
		<dd><a href="{{ organism.url_for_gene(alignment.name) }}">{{ organism.url_for_gene(alignment.name) }}</a></dd>
	</dl>
</div>

<div id="graphic">
	
	<strong>HSP Score Color Key:</strong>
	<div id="colorKey">
		<div class="great">>= 200</div>
		<div class="good">>= 80</div>
		<div class="okay">>= 50</div>
		<div class="poor">>= 40</div>
		<div class="bad">< 40</div>
		<div style="clear: both; float: none"></div>
	</div>
	
	<table>
		<tr>
			<th></th>
			<th></th>
			<th colspan="2">Query</th>
		</tr>
		<tr>
			<th></th>
			<th></th>
			<th></th>
			<th id="queryLength">{{ input_width }} nt</th>
		</tr>
		<tr>
			<th></th>
			<th></th>
			<th></th>
			<th id="queryDomainsHeader"></th>
		</tr>
		<tr>
			<th>Hit</th>
			<th id="accessionLength">{{ alignment.length }} nt</th>
			<th id="targetDomainsHeader"></th>
			<td>
				<div id="alignmentGraph"></div>
			</td>
		</tr>
	</table>
</div>

<div style="clear: both"></div>

<div id="sequence">
	<h3>Sequence</h3>
	<span>>{{ organism.get_fullname(alignment.name) }} [{{ organism.slug }}]<br/>{{ organism.get_sequence(alignment.name) }}</span>
</div>

<div id="hsps">
	<h3>High-scoring pairs</h3>
</div>

</div>

<script type="text/html" id="hspTemplate">
	<div class="hsp">
		<div class="hspInfo">
			<dl>
				<dt>E-value</dt>
				<dd class="evalue"></dd>
				
				<dt>Score</dt>
				<dd class="score"></dd>
				
				<dt>Query</dt>
				<dd>
					<span class="queryStart"></span>–<span class="queryEnd"></span>
					out of <span class="queryLength"></span> nt
				</dd>
				
				<dt>Target</dt>
				<dd>
					<span class="targetStart"></span>–<span class="targetEnd"></span>
					out of <span class="targetLength"></span> nt
				</dd>
		</div>
		<div class="match"></div>
	</div>
</script>
<script type="text/html" id="matchChunkTemplate">
	<div class="matchChunk">
		<span class="subjectLine"></span><br>
		<span class="matchLine"></span><br>
		<span class="queryLine"></span>
	</div>
</script>
<script type="text/javascript">

	Raphael.fn.line = function(start, end) {
		return this.path("M" + start.x + " " + start.y + "L" + end.x + " " + end.y);
	}
	Raphael.fn.epb = {
		resizeToParent: function() {
			var size = $.size(this.canvas.parentNode);
			this.setSize(size.width, size.height);
		}
	}

	var HSPRenderer = function(hsp) {
		this.hsp = hsp;
	}
	HSPRenderer.prototype = {
		drawOn: function(paper) {
			var start = {
				x: parseInt(1.0 * this.hsp.query_start / this.hsp.alignment.input_width * paper.width),
				y: parseInt(1.0 * this.hsp.subject_start / this.hsp.alignment.length * paper.height), };
			var end = {
				x: parseInt(1.0 * this.hsp.query_end / this.hsp.alignment.input_width * paper.width),
				y: parseInt(1.0 * this.hsp.subject_end / this.hsp.alignment.length * paper.height), };
			
			var line = paper.line(start, end);
			line.node.removeAttribute("style");
			line.node.removeAttribute("stroke");
			// className is an SVGAnimatedString, so change .baseVal
			line.node.className.baseVal = HSPHelpers.quality(this.hsp);
			return line;
		}
	}
	
	var QueryDomainRenderer = function(domain) {
		this.domain = domain;
	}
	QueryDomainRenderer.prototype = {
		drawOn: function(paper) {
			
			var x = parseInt(this.domain.query_start * paper.width);
			var w = parseInt(this.domain.query_width * paper.width);
			var rect = paper.rect(x, 0, w, paper.height);
			rect.node.removeAttribute("fill");
			rect.node.removeAttribute("stroke");
		}
	}
	
	var TargetDomainRenderer = function(domain) {
		this.domain = domain;
	}
	TargetDomainRenderer.prototype = {
		drawOn: function(paper) {
			
			var y = parseInt(this.domain.query_start * paper.height);
			var h = parseInt(this.domain.query_width * paper.height);
			var rect = paper.rect(0, y, paper.width, h);
			rect.node.removeAttribute("fill");
			rect.node.removeAttribute("stroke");
		}
	}

	var AlignmentCanvas = View.extend({
		init: function(opts) {
			this.paper = Raphael(opts.parent, 1, 1);
			this.element = this.paper.canvas;
			this.element.removeAttribute("style");
		},
		render: function() {
			this.paper.epb.resizeToParent();

			var self = this;
			_.each(this.model.domains, function(domain) {
				new QueryDomainRenderer(domain).drawOn(self.paper);
			});
			_.each(this.model.alignment.domains, function(domain) {
				new TargetDomainRenderer(domain).drawOn(self.paper);
			});
			_.each(this.model.alignment.hsps, function(hsp) {
				hsp.alignment = self.model.alignment;
				new HSPRenderer(hsp).drawOn(self.paper);
			});
		}
	})
	
	var MatchChunkView = View.extend({
		init: function(opts) {
			this.element = new Template("matchChunkTemplate").asElement();
			opts.parent.appendChild(this.element);
		},
		render: function() {
			this.$(".subjectLine").innerHTML = this.model.subject;
			this.$(".matchLine").innerHTML = this.model.match;
			this.$(".queryLine").innerHTML = this.model.query;
		}
	})
	
	var MatchView = View.extend({
		init: function() {
			var self = this;
			_.each(this.model, function(chunk) {
				new MatchChunkView({
					parent: self.element,
					model: chunk,
				})
			});
		}
	})
	
	var HSPHelpers = {
		quality: function(hsp) {
			// "bad, poor, okay, good, great"
			var score = hsp.score;
			if (score >= 200) {
				return "great";
			} else if (score >= 80) {
				return "good";
			} else if (score >= 50) {
				return "okay";
			} else if (score >= 40) {
				return "poor";
			} else {
				return "bad";
			}
		},
	}
	
	var HSPView = View.extend({
		init: function(opts) {
			this.element = new Template("hspTemplate").asElement();
			opts.parent.appendChild(this.element);
			
			new MatchView({
				element: this.$(".match"),
				model: this.model.match,
			})
		},
		render: function() {
			this.element.className = "hsp " + HSPHelpers.quality(this.model);
			this.$(".evalue").innerHTML = this.model.evalue;
			this.$(".score").innerHTML = this.model.score;
			this.$(".queryStart").innerHTML = this.model.query_start;
			this.$(".queryEnd").innerHTML = this.model.query_end;
			this.$(".queryLength").innerHTML = this.model.alignment.input_width;
			this.$(".targetStart").innerHTML = this.model.subject_start;
			this.$(".targetEnd").innerHTML = this.model.subject_end;
			this.$(".targetLength").innerHTML = this.model.alignment.length;
		}
	})
	
	var HSPCollectionView = View.extend({
		init: function() {
			var self = this;
			_.each(this.model, function(hsp) {
				new HSPView({
					parent: self.element,
					model: hsp
				});
			});
		},
	});
	
	var QueryDomainsHeaderView = View.extend({
		init: function() {
			this.paper = Raphael(this.element);
		},
		render: function() {
			this.paper.epb.resizeToParent();
			
			var self = this;
			_.each(this.model, function(domain) {
				var x = parseInt(domain.query_start * self.paper.width);
				var w = parseInt(domain.query_width * self.paper.width);

				var rect = self.paper.rect(x, 0, w, self.paper.height);
				rect.node.removeAttribute("fill");
				rect.node.removeAttribute("stroke");
				rect.attr({href: domain.url});
			});
		}
	});
	
	var TargetDomainsHeaderView = View.extend({
		init: function() {
			this.paper = Raphael(this.element);
		},
		render: function() {
			this.paper.epb.resizeToParent();
			
			var self = this;
			_.each(this.model, function(domain) {
				var y = parseInt(domain.query_start * self.paper.height);
				var h = parseInt(domain.query_width * self.paper.height);

				var rect = self.paper.rect(0, y, self.paper.width, h);
				rect.node.removeAttribute("fill");
				rect.node.removeAttribute("stroke");
				rect.attr({href: domain.url});
			});
		}
	});
	
	var Data = {
		alignment: {
			name: "{{ alignment.name }}",
			input_width: {{ input_width }},
			length: {{ alignment.length }},
			domains: [
				{% for domain in organism.get_domains(alignment.name) %}
				{
					query_start: {{ domain.query_start / alignment.length }},
					query_width: {{ (domain.query_end - domain.query_start) / alignment.length }},
					name: "{{ domain.name }}",
					url: "{{ domain.url }}",
				},
				{% endfor %}
			],
			hsps: [
				{% for hsp, datum in data.by_hsp() %}
					{
						evalue: {{ hsp.evalue }},
						score: {{ hsp.score }},
						query_start: {{ hsp.query_start }},
						query_end: {{ hsp.query_start + hsp.query_width }},
						subject_start: {{ hsp.subject_start }},
						subject_end: {{ hsp.subject_start + hsp.subject_width }},
						match: [
							{% for query, match, subject in hsp.lines() %}
								{
									query: "{{ query }}",
									match: "{{ match }}",
									subject: "{{ subject }}",
								},
							{% endfor %}
						],
					},
				{% endfor %}
			],
		},
		query_domains: [
			{% for domain in domains %}
			{
				query_start: {{ domain.query_start / input_width }},
				query_width: {{ domain.query_width / input_width }},
				name: "{{ domain.name }}",
				url: "{{ domain.url }}",
			},
			{% endfor %}
		],
	}
	
	new AlignmentCanvas({
		parent: $("#alignmentGraph"),
		model: {
			alignment: Data.alignment,
			domains: Data.query_domains,
		},
	});
	
	new HSPCollectionView({
		element: $("#hsps"),
		model: Data.alignment.hsps,
	});
	
	new QueryDomainsHeaderView({
		element: $("#queryDomainsHeader"),
		model: Data.query_domains,
	})
	new TargetDomainsHeaderView({
		element: $("#targetDomainsHeader"),
		model: Data.alignment.domains,
	})
</script>
</body>
</html>